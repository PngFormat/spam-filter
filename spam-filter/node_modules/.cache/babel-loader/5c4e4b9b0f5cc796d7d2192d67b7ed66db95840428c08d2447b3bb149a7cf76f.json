{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport Filter from 'bad-words';\nimport rusBadWords from '../rusbadwords.json';\nimport ukrBadWords from '../ukrainianbadwords.json';\nimport Stickers from \"./Stickers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser,\n  username\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [selectedSticker, setSelectedSticker] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const filter = new Filter();\n  const rusFilter = new Set(rusBadWords);\n  const ukrFilter = new Set(ukrBadWords);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/messages');\n        const storedMessages = response.data;\n        setMessages(storedMessages);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    return () => {\n      localStorage.setItem('chatMessages', JSON.stringify(messages));\n    };\n  }, [messages]);\n  const handleStickerSelect = stickerUrl => {\n    setSelectedSticker(stickerUrl);\n  };\n  const isValidImageUrl = url => {\n    return /\\.(jpeg|jpg|gif|png)$/.test(url);\n  };\n  const addToBlacklist = async (username, reason) => {\n    try {\n      const authToken = localStorage.getItem('authToken');\n      await axios.post('http://localhost:3001/api/blacklist', {\n        username,\n        reason\n      }, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      console.log(`User ${username} added to blacklist for reason: ${reason}`);\n    } catch (error) {\n      console.error('Error adding user to blacklist:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() && !selectedSticker) {\n      console.warn('Message text is empty and no sticker is selected');\n      return;\n    }\n    let messageToSend = newMessage.trim();\n    if (selectedSticker) {\n      messageToSend += ` ${selectedSticker}`;\n    }\n    if (currentUser) {\n      const profaneWordCount = countProfaneWords(messageToSend);\n      if (profaneWordCount > 2) {\n        addToBlacklist(currentUser.username, 'Excessive profanity');\n        alert('Excessive profanity detected. Your message cannot be sent.');\n        return;\n      }\n      const censoredMessage = censorMessage(messageToSend);\n      try {\n        const response = await axios.post('http://localhost:3001/api/messages', {\n          text: censoredMessage,\n          userId: currentUser.id,\n          username\n        });\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n        setSelectedSticker(null);\n      } catch (error) {\n        if (error.response && error.response.status === 429) {\n          setRateLimitMessage(error.response.data.message);\n          setOpenSnackbar(true);\n        } else {\n          console.error('Error sending message:', error);\n        }\n      }\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const countProfaneWords = message => {\n    const words = message.split(/\\s+/);\n    let profaneCount = 0;\n    words.forEach(word => {\n      if (filter.isProfane(word) || rusFilter.has(word.toLowerCase()) || ukrFilter.has(word.toLowerCase())) {\n        console.log(`Processing word: ${word}`);\n        console.log(`Profane word detected: ${word}`);\n        profaneCount++;\n        console.log(`Total profane word count: ${profaneCount}`);\n      }\n    });\n    return profaneCount;\n  };\n  const handleDeleteMessage = async messageId => {\n    console.log(\"Deleting message with ID:\", messageId);\n    const authToken = localStorage.getItem('authToken');\n    try {\n      await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      alert('Failed to delete message. Please try again later.');\n    }\n  };\n  const censorMessage = message => {\n    return message.split(/\\s+/).map(word => {\n      if (filter.isProfane(word) || rusFilter.has(word.toLowerCase()) || ukrFilter.has(word.toLowerCase())) {\n        addToBlacklist(currentUser.username, 'inappropriate words');\n        return '*'.repeat(word.length);\n      } else {\n        return word;\n      }\n    }).join(' ');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatContainer,\n    style: {\n      backgroundColor: '#f3f3f3',\n      color: '#333'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      className: classes.welcomeMessage,\n      children: [\"Welcome, \", currentUser.username, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `${classes.messageItem} ${message.username === username ? classes.ownMessage : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.messageContent,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this), message.text.trim().startsWith('/static/media/') ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: message.text,\n            alt: \"Sticker\",\n            className: classes.stickerImage,\n            width: \"30\",\n            height: \"30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }, this) : message.text.split(' ').map((part, index) => part.startsWith('/static/media/') ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: part,\n            alt: \"Sticker\",\n            className: classes.stickerImage,\n            width: \"30\",\n            height: \"30\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: part.split(':').map((subPart, subIndex) => subIndex % 2 === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: subPart\n            }, subIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 53\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `smiley-${subPart}.png`,\n              alt: `Smiley ${subPart}`\n            }, subIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 53\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 41\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), message.username === username && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: () => handleDeleteMessage(message._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        style: {\n          backgroundColor: '#fff',\n          color: '#333'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Stickers, {\n        onStickerSelect: handleStickerSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        className: classes.sendButton,\n        style: {\n          backgroundColor: '#2196F3'\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"D4qKRsbHMYAe41axWhR/e5YKc8Q=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","styles","axios","Filter","rusBadWords","ukrBadWords","Stickers","jsxDEV","_jsxDEV","Chat","currentUser","username","_s","classes","messages","setMessages","selectedSticker","setSelectedSticker","newMessage","setNewMessage","filter","rusFilter","Set","ukrFilter","fetchMessages","response","get","storedMessages","data","error","console","localStorage","setItem","JSON","stringify","handleStickerSelect","stickerUrl","isValidImageUrl","url","test","addToBlacklist","reason","authToken","getItem","post","headers","Authorization","log","handleSendMessage","trim","warn","messageToSend","profaneWordCount","countProfaneWords","alert","censoredMessage","censorMessage","text","userId","id","prevMessages","status","setRateLimitMessage","message","setOpenSnackbar","words","split","profaneCount","forEach","word","isProfane","has","toLowerCase","handleDeleteMessage","messageId","delete","_id","map","repeat","length","join","className","chatContainer","style","backgroundColor","color","children","variant","paragraph","welcomeMessage","fileName","_jsxFileName","lineNumber","columnNumber","messageList","messageItem","ownMessage","messageContent","startsWith","src","alt","stickerImage","width","height","part","index","Fragment","subPart","subIndex","onClick","inputContainer","input","type","placeholder","value","onChange","e","target","onStickerSelect","sendButton","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Filter from 'bad-words';\r\nimport rusBadWords from '../rusbadwords.json';\r\nimport ukrBadWords from '../ukrainianbadwords.json';\r\nimport Stickers from \"./Stickers\";\r\n\r\ninterface Message {\r\n    _id: string;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    username: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n    username: string;\r\n}\r\n\r\ninterface Sticker {\r\n    url: string;\r\n    name: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser, username }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [selectedSticker, setSelectedSticker] = useState<string | null>(null);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const filter = new Filter();\r\n    const rusFilter = new Set(rusBadWords);\r\n    const ukrFilter = new Set(ukrBadWords);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:3001/api/messages');\r\n                const storedMessages = response.data;\r\n                setMessages(storedMessages);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        };\r\n    }, [messages]);\r\n\r\n    const handleStickerSelect = (stickerUrl: string) => {\r\n        setSelectedSticker(stickerUrl);\r\n    };\r\n\r\n    const isValidImageUrl = (url: string) => {\r\n        return /\\.(jpeg|jpg|gif|png)$/.test(url);\r\n    };\r\n\r\n    const addToBlacklist = async (username: string, reason: string) => {\r\n        try {\r\n            const authToken = localStorage.getItem('authToken');\r\n            await axios.post('http://localhost:3001/api/blacklist', { username, reason }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`\r\n                }\r\n            });\r\n            console.log(`User ${username} added to blacklist for reason: ${reason}`);\r\n        } catch (error) {\r\n            console.error('Error adding user to blacklist:', error);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (!newMessage.trim() && !selectedSticker) {\r\n            console.warn('Message text is empty and no sticker is selected');\r\n            return;\r\n        }\r\n\r\n        let messageToSend = newMessage.trim();\r\n\r\n        if (selectedSticker) {\r\n            messageToSend += ` ${selectedSticker}`;\r\n        }\r\n\r\n        if (currentUser) {\r\n            const profaneWordCount = countProfaneWords(messageToSend);\r\n\r\n            if (profaneWordCount > 2) {\r\n                addToBlacklist(currentUser.username, 'Excessive profanity');\r\n                alert('Excessive profanity detected. Your message cannot be sent.');\r\n                return;\r\n            }\r\n\r\n            const censoredMessage = censorMessage(messageToSend);\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:3001/api/messages', {\r\n                    text: censoredMessage,\r\n                    userId: currentUser.id,\r\n                    username,\r\n                });\r\n\r\n                setMessages(prevMessages => [...prevMessages, response.data]);\r\n                setNewMessage('');\r\n                setSelectedSticker(null);\r\n            } catch (error) {\r\n                if (error.response && error.response.status === 429) {\r\n                    setRateLimitMessage(error.response.data.message);\r\n                    setOpenSnackbar(true);\r\n                } else {\r\n                    console.error('Error sending message:', error);\r\n                }\r\n            }\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    const countProfaneWords = (message: string): number => {\r\n        const words = message.split(/\\s+/);\r\n        let profaneCount = 0;\r\n\r\n        words.forEach(word => {\r\n            if (filter.isProfane(word) || rusFilter.has(word.toLowerCase()) || ukrFilter.has(word.toLowerCase())) {\r\n                console.log(`Processing word: ${word}`);\r\n                console.log(`Profane word detected: ${word}`);\r\n                profaneCount++;\r\n                console.log(`Total profane word count: ${profaneCount}`);\r\n            }\r\n        });\r\n\r\n        return profaneCount;\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId: string) => {\r\n        console.log(\"Deleting message with ID:\", messageId);\r\n        const authToken = localStorage.getItem('authToken');\r\n\r\n        try {\r\n            await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`\r\n                }\r\n            });\r\n\r\n            setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\r\n        } catch (error) {\r\n            console.error('Error deleting message:', error);\r\n            alert('Failed to delete message. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const censorMessage = (message: string) => {\r\n        return message\r\n            .split(/\\s+/)\r\n            .map(word => {\r\n                if (filter.isProfane(word) || rusFilter.has(word.toLowerCase()) || ukrFilter.has(word.toLowerCase())) {\r\n                    addToBlacklist(currentUser.username, 'inappropriate words');\r\n                    return '*'.repeat(word.length);\r\n                } else {\r\n                    return word;\r\n                }\r\n            })\r\n            .join(' ');\r\n    };\r\n\r\n    return (\r\n        <div className={classes.chatContainer} style={{ backgroundColor: '#f3f3f3', color: '#333' }}>\r\n            <Typography variant=\"body1\" paragraph className={classes.welcomeMessage}>\r\n                Welcome, {currentUser.username} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li key={message._id} className={`${classes.messageItem} ${message.username === username ? classes.ownMessage : ''}`}>\r\n                        <div className={classes.messageContent}>\r\n                            <strong>{message.username}: </strong>\r\n                            {message.text.trim().startsWith('/static/media/') ? (\r\n                                <img src={message.text} alt=\"Sticker\" className={classes.stickerImage} width=\"30\" height=\"30\" />\r\n                            ) : (\r\n                                message.text.split(' ').map((part, index) => (\r\n                                    part.startsWith('/static/media/') ? (\r\n                                        <img key={index} src={part} alt=\"Sticker\" className={classes.stickerImage} width=\"30\" height=\"30\" />\r\n                                    ) : (\r\n                                        <React.Fragment key={index}>\r\n                                            {part.split(':').map((subPart, subIndex) => (\r\n                                                subIndex % 2 === 0 ? (\r\n                                                    <span key={subIndex}>{subPart}</span>\r\n                                                ) : (\r\n                                                    <img key={subIndex} src={`smiley-${subPart}.png`} alt={`Smiley ${subPart}`} />\r\n                                                )\r\n                                            ))}\r\n                                        </React.Fragment>\r\n                                    )\r\n                                ))\r\n                            )}\r\n                        </div>\r\n                        {message.username === username && (\r\n                            <Button variant=\"outlined\" color=\"error\" onClick={() => handleDeleteMessage(message._id)}>\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                    style={{ backgroundColor: '#fff', color: '#333' }}\r\n                />\r\n                <Stickers onStickerSelect={handleStickerSelect} />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage} className={classes.sendButton} style={{ backgroundColor: '#2196F3' }}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
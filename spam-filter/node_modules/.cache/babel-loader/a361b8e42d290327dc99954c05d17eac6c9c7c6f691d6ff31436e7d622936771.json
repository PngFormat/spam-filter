{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    const fetchCurrentUser = async () => {\n      try {\n        const response = await axios.get(`/api/user/${username}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('authToken')}`\n          }\n        });\n        console.log(response.data);\n      } catch (error) {\n        console.error('Error fetching current user:', error);\n      }\n    };\n    fetchCurrentUser();\n  }, []);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      children: [\"Welcome, \", currentUser.name, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classes.messageItem,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), message.text]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","styles","axios","jsxDEV","_jsxDEV","Chat","currentUser","_s","classes","messages","setMessages","newMessage","setNewMessage","fetchCurrentUser","response","get","username","headers","Authorization","localStorage","getItem","console","log","data","error","handleSendMessage","trim","warn","post","text","nickname","then","prevMessages","catch","alert","children","variant","paragraph","name","id","fileName","_jsxFileName","lineNumber","columnNumber","className","messageList","map","message","messageItem","inputContainer","input","type","placeholder","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        const fetchCurrentUser = async () => {\r\n            try {\r\n                const response = await axios.get(`/api/user/${username}`, {\r\n\r\n                    headers: {\r\n                        Authorization: `Bearer ${localStorage.getItem('authToken')}`\r\n                    }\r\n                });\r\n                console.log(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching current user:', error);\r\n            }\r\n        };\r\n\r\n        fetchCurrentUser();\r\n    }, []);\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, username: currentUser.nickname })\r\n                .then(response => {\r\n                    setMessages(prevMessages => [...prevMessages, response.data]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Welcome, {currentUser.name} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li key={message.id} className={classes.messageItem}>\r\n                        <strong>{message.username}: </strong>\r\n                        {message.text}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
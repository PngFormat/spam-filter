{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport RegistrationForm from \"./RegistrationForm\";\nimport { Button, makeStyles, Paper, TextField, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: 600,\n    margin: 'auto',\n    padding: theme.spacing(2)\n  },\n  welcomeMessage: {\n    marginBottom: theme.spacing(2)\n  },\n  messageList: {\n    listStyle: 'none',\n    padding: 0,\n    maxHeight: 300,\n    overflowY: 'auto'\n  },\n  messageItem: {\n    marginBottom: theme.spacing(1)\n  },\n  inputContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: theme.spacing(2)\n  },\n  input: {\n    flex: 1,\n    marginRight: theme.spacing(1)\n  }\n}));\nconst ChatRoom = () => {\n  _s();\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [name, setName] = useState('');\n  const socket = io('http://localhost:3001', {\n    transports: ['websocket'],\n    reconnection: true,\n    reconnectionAttempts: 3\n  });\n  useEffect(() => {\n    loginUser();\n  }, []);\n  useEffect(() => {\n    axios.get('http://localhost:3001/api/messages').then(response => setMessages(response.data)).catch(error => console.error('Error fetching initial messages:', error));\n    socket.on('newMessage', newMessage => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n  const loginUser = async () => {\n    try {\n      const users = await fetch('/api/users').then(response => response.json());\n      console.log('List of users:', users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const handleRegister = useCallback(userData => {\n    axios.post('http://localhost:3001/api/users', userData).then(response => {\n      const newUser = response.data.message;\n      console.log('New user:', newUser);\n      setCurrentUser(newUser);\n      const {\n        name\n      } = newUser || {};\n      setName(name);\n      console.log(`Welcome, ${name}!`);\n    }).catch(error => {\n      console.error('Error creating user:', error);\n    });\n  }, [setCurrentUser, setName]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const sendMessage = message => {\n    socket.emit('sendMessage', {\n      text: message\n    });\n  };\n  socket.on('newMessage', message => {\n    console.log('New message:', message);\n  });\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      className: classes.welcomeMessage,\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), !currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        onRegister: userData => handleRegister({\n          username: userData.name,\n          email: userData.nickname,\n          password: userData.password\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        paragraph: true,\n        children: [\"Welcome, \", currentUser.id, \" (\", currentUser.nickname, \")!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.messageList,\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classes.messageItem,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this), message.text]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputContainer,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.input,\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"atUJbLSd59KHa36e7Z9UACNqjvM=\", false, function () {\n  return [useStyles];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","io","RegistrationForm","Button","makeStyles","Paper","TextField","Typography","jsxDEV","_jsxDEV","useStyles","theme","root","maxWidth","margin","padding","spacing","welcomeMessage","marginBottom","messageList","listStyle","maxHeight","overflowY","messageItem","inputContainer","display","alignItems","marginTop","input","flex","marginRight","ChatRoom","_s","classes","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","name","setName","socket","transports","reconnection","reconnectionAttempts","loginUser","get","then","response","data","catch","error","console","on","prevMessages","disconnect","users","fetch","json","log","handleRegister","userData","post","newUser","message","handleSendMessage","trim","warn","text","username","nickname","alert","sendMessage","emit","className","elevation","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","email","password","paragraph","id","map","type","placeholder","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport RegistrationForm from \"./RegistrationForm\";\r\nimport {Button, makeStyles, Paper, TextField, Theme, Typography} from \"@mui/material\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        maxWidth: 600,\r\n        margin: 'auto',\r\n        padding: theme.spacing(2),\r\n    },\r\n    welcomeMessage: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    messageList: {\r\n        listStyle: 'none',\r\n        padding: 0,\r\n        maxHeight: 300,\r\n        overflowY: 'auto',\r\n    },\r\n    messageItem: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    inputContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    input: {\r\n        flex: 1,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n    const [name, setName] = useState<string>('');\r\n    const socket = io('http://localhost:3001', {\r\n        transports: ['websocket'],\r\n        reconnection: true,\r\n        reconnectionAttempts: 3,\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        loginUser();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:3001/api/messages')\r\n            .then(response => setMessages(response.data))\r\n            .catch(error => console.error('Error fetching initial messages:', error));\r\n\r\n        socket.on('newMessage', (newMessage) => {\r\n            setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, [socket]);\r\n\r\n    const loginUser = async () => {\r\n        try {\r\n            const users = await fetch('/api/users').then((response) => response.json());\r\n            console.log('List of users:', users);\r\n        } catch (error) {\r\n            console.error('Error fetching users:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const handleRegister = useCallback((userData: { username: string; email: string; password: string }) => {\r\n        axios\r\n            .post('http://localhost:3001/api/users', userData)\r\n            .then((response) => {\r\n                const newUser = response.data.message;\r\n                console.log('New user:', newUser);\r\n                setCurrentUser(newUser);\r\n                const { name } = newUser || {};\r\n                setName(name);\r\n\r\n\r\n                console.log(`Welcome, ${name}!`);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error creating user:', error);\r\n            });\r\n    }, [setCurrentUser, setName]);\r\n\r\n\r\n\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, username: currentUser.nickname })\r\n                .then(response => {\r\n                    setMessages((prevMessages) => [...prevMessages, response.data]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const sendMessage = (message: any) => {\r\n        socket.emit('sendMessage', { text: message });\r\n    };\r\n\r\n\r\n    socket.on('newMessage', (message) => {\r\n        console.log('New message:', message);\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Paper className={classes.root} elevation={3}>\r\n            <Typography variant=\"h5\" className={classes.welcomeMessage}>\r\n                Chat Room\r\n            </Typography>\r\n\r\n            {!currentUser && (\r\n                <div>\r\n                    <RegistrationForm\r\n                        onRegister={(userData) => handleRegister({\r\n                            username: userData.name,\r\n                            email: userData.nickname,\r\n                            password: userData.password\r\n                        })}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {currentUser && (\r\n                <div>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                        Welcome, {currentUser.id} ({currentUser.nickname})!\r\n                    </Typography>\r\n\r\n                    <ul className={classes.messageList}>\r\n                        {messages.map((message) => (\r\n                            <li key={message.id} className={classes.messageItem}>\r\n                                <strong>{message.username}: </strong>\r\n                                {message.text}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div className={classes.inputContainer}>\r\n                        <TextField\r\n                            className={classes.input}\r\n                            type=\"text\"\r\n                            placeholder=\"Type your message...\"\r\n                            value={newMessage}\r\n                            onChange={(e) => setNewMessage(e.target.value)}\r\n                        />\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                            Send\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
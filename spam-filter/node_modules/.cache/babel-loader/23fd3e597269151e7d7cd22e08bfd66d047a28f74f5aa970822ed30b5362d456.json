{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport RegistrationForm from \"./RegistrationForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const socket = io('http://localhost:3001', {\n    transports: ['websocket'],\n    reconnection: true,\n    reconnectionAttempts: 3\n  });\n  useEffect(() => {\n    loginUser();\n  }, []);\n  useEffect(() => {\n    axios.get('http://localhost:3001/api/messages').then(response => setMessages(response.data)).catch(error => console.error('Error fetching initial messages:', error));\n    socket.on('newMessage', newMessage => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n  const loginUser = async () => {\n    try {\n      const users = await fetch('/api/users').then(response => response.json());\n      console.log('List of users:', users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const handleRegister = useCallback(userData => {\n    axios.post('http://localhost:3001/api/users', userData).then(response => {\n      const newUser = response.data.user;\n      setCurrentUser(newUser);\n      console.log('New user:', newUser);\n\n      // Extract the name from the user data and set it in the state\n      const {\n        name\n      } = newUser;\n      setName(name);\n    }).catch(error => {\n      console.error('Error creating user:', error);\n    });\n  }, [setCurrentUser, setName]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const sendMessage = message => {\n    socket.emit('sendMessage', {\n      text: message\n    });\n  };\n  socket.on('newMessage', message => {\n    console.log('New message:', message);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), !currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        onRegister: userData => handleRegister({\n          username: userData.name,\n          email: userData.nickname,\n          password: userData.password\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", currentUser.name, \" (\", currentUser.nickname, \")!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 33\n          }, this), message.text]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"ojDIs1sQT8wSLK9OqxNC2M7CHRk=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","io","RegistrationForm","jsxDEV","_jsxDEV","ChatRoom","_s","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","socket","transports","reconnection","reconnectionAttempts","loginUser","get","then","response","data","catch","error","console","on","prevMessages","disconnect","users","fetch","json","log","handleRegister","userData","post","newUser","user","name","setName","handleSendMessage","trim","warn","text","username","nickname","alert","sendMessage","message","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","email","password","map","id","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport RegistrationForm from \"./RegistrationForm\";\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n    const socket = io('http://localhost:3001', {\r\n        transports: ['websocket'],\r\n        reconnection: true,\r\n        reconnectionAttempts: 3,\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        loginUser();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:3001/api/messages')\r\n            .then(response => setMessages(response.data))\r\n            .catch(error => console.error('Error fetching initial messages:', error));\r\n\r\n        socket.on('newMessage', (newMessage) => {\r\n            setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, [socket]);\r\n\r\n    const loginUser = async () => {\r\n        try {\r\n            const users = await fetch('/api/users').then((response) => response.json());\r\n            console.log('List of users:', users);\r\n        } catch (error) {\r\n            console.error('Error fetching users:', error);\r\n        }\r\n    };\r\n\r\n    const handleRegister = useCallback((userData: { name: string; nickname: string; password: string }) => {\r\n        axios\r\n            .post('http://localhost:3001/api/users', userData)\r\n            .then((response) => {\r\n                const newUser = response.data.user;\r\n                setCurrentUser(newUser);\r\n                console.log('New user:', newUser);\r\n\r\n                // Extract the name from the user data and set it in the state\r\n                const { name } = newUser;\r\n                setName(name);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error creating user:', error);\r\n            });\r\n    }, [setCurrentUser, setName]);\r\n\r\n\r\n\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, username: currentUser.nickname })\r\n                .then(response => {\r\n                    setMessages((prevMessages) => [...prevMessages, response.data]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const sendMessage = (message: any) => {\r\n        socket.emit('sendMessage', { text: message });\r\n    };\r\n\r\n\r\n    socket.on('newMessage', (message) => {\r\n        console.log('New message:', message);\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Chat Room</h2>\r\n\r\n            {!currentUser && (\r\n                <div>\r\n                    <RegistrationForm\r\n                        onRegister={(userData) => handleRegister({\r\n                            username: userData.name,\r\n                            email: userData.nickname,\r\n                            password: userData.password\r\n                        })}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {currentUser && (\r\n                <div>\r\n                    <p>Welcome, {currentUser.name} ({currentUser.nickname})!</p>\r\n\r\n                    <ul>\r\n                        {messages.map(message => (\r\n                            <li key={message.id}>\r\n                                <strong>{message.username}: </strong>\r\n                                {message.text}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Type your message...\"\r\n                            value={newMessage}\r\n                            onChange={(e) => setNewMessage(e.target.value)}\r\n                        />\r\n                        <button onClick={handleSendMessage}>Send</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport RegistrationForm from \"./RegistrationForm\";\nimport { Button, Paper, TextField, Typography } from \"@mui/material\";\nimport styles from '../styles/Home.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    loginUser();\n  }, []);\n  const loginUser = async () => {\n    try {\n      const response = await fetch('/api/login');\n      const user = await response.json();\n      setCurrentUser(user);\n\n      // Загрузка сообщений чата после успешного входа или регистрации\n      loadMessages();\n    } catch (error) {\n      console.error('Error logging in:', error);\n    }\n  };\n  const loadMessages = async () => {\n    try {\n      const response = await fetch('/api/messages');\n      const messagesData = await response.json();\n      setMessages(messagesData);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const handleRegister = useCallback(userData => {\n    axios.post('http://localhost:3001/api/register', userData).then(response => {\n      const newUser = response.data.message;\n      console.log('New user:', newUser);\n      loginUser(); // После успешной регистрации загрузить сообщения чата\n    }).catch(error => {\n      console.error('Error creating user:', error);\n    });\n  }, []);\n  const handleLogin = useCallback(userData => {\n    axios.post('http://localhost:3001/api/login', userData).then(response => {\n      const loggedInUser = response.data.user;\n      console.log('Logged in user:', loggedInUser);\n      setCurrentUser(loggedInUser);\n\n      // Загрузка сообщений чата после успешного входа или регистрации\n      loadMessages();\n    }).catch(error => {\n      console.error('Error logging in:', error);\n    });\n  }, []);\n  const handleSendMessage = () => {\n    // Обработка отправки сообщения\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      className: classes.welcomeMessage,\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        paragraph: true,\n        children: [\"Welcome, \", currentUser.name, \" (\", currentUser.nickname, \")!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.messageList,\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classes.messageItem,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), message.text]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputContainer,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.input,\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(RegistrationForm, {\n      onRegister: userData => handleRegister({\n        username: userData.name,\n        email: userData.nickname,\n        password: userData.password\n      }),\n      onLogin: userData => handleLogin({\n        username: userData.name,\n        password: userData.password\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"oen9eJEEoUwDpqRGwkKKNMJD3VU=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","RegistrationForm","Button","Paper","TextField","Typography","styles","jsxDEV","_jsxDEV","ChatRoom","_s","classes","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","loginUser","response","fetch","user","json","loadMessages","error","console","messagesData","handleRegister","userData","post","then","newUser","data","message","log","catch","handleLogin","loggedInUser","handleSendMessage","className","root","elevation","children","variant","welcomeMessage","fileName","_jsxFileName","lineNumber","columnNumber","paragraph","name","nickname","messageList","map","messageItem","username","text","id","inputContainer","input","type","placeholder","value","onChange","e","target","color","onClick","onRegister","email","password","onLogin","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport RegistrationForm from \"./RegistrationForm\";\r\nimport { Button, Paper, TextField, Typography } from \"@mui/material\";\r\nimport styles from '../styles/Home.module.css';\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const classes = styles;\r\n\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n\r\n    useEffect(() => {\r\n        loginUser();\r\n    }, []);\r\n\r\n    const loginUser = async () => {\r\n        try {\r\n            const response = await fetch('/api/login');\r\n            const user = await response.json();\r\n            setCurrentUser(user);\r\n\r\n            // Загрузка сообщений чата после успешного входа или регистрации\r\n            loadMessages();\r\n        } catch (error) {\r\n            console.error('Error logging in:', error);\r\n        }\r\n    };\r\n\r\n    const loadMessages = async () => {\r\n        try {\r\n            const response = await fetch('/api/messages');\r\n            const messagesData = await response.json();\r\n            setMessages(messagesData);\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    const handleRegister = useCallback((userData: { username: string; email: string; password: string }) => {\r\n        axios\r\n            .post('http://localhost:3001/api/register', userData)\r\n            .then((response) => {\r\n                const newUser = response.data.message;\r\n                console.log('New user:', newUser);\r\n                loginUser(); // После успешной регистрации загрузить сообщения чата\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error creating user:', error);\r\n            });\r\n    }, []);\r\n\r\n    const handleLogin = useCallback((userData: { username: string; password: string }) => {\r\n        axios\r\n            .post('http://localhost:3001/api/login', userData)\r\n            .then((response) => {\r\n                const loggedInUser = response.data.user;\r\n                console.log('Logged in user:', loggedInUser);\r\n                setCurrentUser(loggedInUser);\r\n\r\n                // Загрузка сообщений чата после успешного входа или регистрации\r\n                loadMessages();\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error logging in:', error);\r\n            });\r\n    }, []);\r\n\r\n    const handleSendMessage = () => {\r\n        // Обработка отправки сообщения\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root} elevation={3}>\r\n            <Typography variant=\"h5\" className={classes.welcomeMessage}>\r\n                Chat Room\r\n            </Typography>\r\n\r\n            {currentUser ? (\r\n                <div>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                        Welcome, {currentUser.name} ({currentUser.nickname})!\r\n                    </Typography>\r\n\r\n                    <ul className={classes.messageList}>\r\n                        {messages.map((message) => (\r\n                            <li key={message.id} className={classes.messageItem}>\r\n                                <strong>{message.username}: </strong>\r\n                                {message.text}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div className={classes.inputContainer}>\r\n                        <TextField\r\n                            className={classes.input}\r\n                            type=\"text\"\r\n                            placeholder=\"Type your message...\"\r\n                            value={newMessage}\r\n                            onChange={(e) => setNewMessage(e.target.value)}\r\n                        />\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                            Send\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <RegistrationForm\r\n                    onRegister={(userData) => handleRegister({\r\n                        username: userData.name,\r\n                        email: userData.nickname,\r\n                        password: userData.password\r\n                    })}\r\n                    onLogin={(userData) => handleLogin({\r\n                        username: userData.name,\r\n                        password: userData.password\r\n                    })}\r\n                />\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,UAAU,QAAQ,eAAe;AACpE,OAAOC,MAAM,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc/C,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,OAAO,GAAGL,MAAM;EAEtB,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAY,EAAE,CAAC;EACvD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAc,IAAI,CAAC;EAEjEC,SAAS,CAAC,MAAM;IACZoB,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC1C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,cAAc,CAACI,IAAI,CAAC;;MAEpB;MACAE,YAAY,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC7C;EACJ,CAAC;EAED,MAAMD,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;MAC7C,MAAMM,YAAY,GAAG,MAAMP,QAAQ,CAACG,IAAI,CAAC,CAAC;MAC1CT,WAAW,CAACa,YAAY,CAAC;IAC7B,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,MAAMG,cAAc,GAAG5B,WAAW,CAAE6B,QAA+D,IAAK;IACpG5B,KAAK,CACA6B,IAAI,CAAC,oCAAoC,EAAED,QAAQ,CAAC,CACpDE,IAAI,CAAEX,QAAQ,IAAK;MAChB,MAAMY,OAAO,GAAGZ,QAAQ,CAACa,IAAI,CAACC,OAAO;MACrCR,OAAO,CAACS,GAAG,CAAC,WAAW,EAAEH,OAAO,CAAC;MACjCb,SAAS,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CACDiB,KAAK,CAAEX,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,WAAW,GAAGrC,WAAW,CAAE6B,QAAgD,IAAK;IAClF5B,KAAK,CACA6B,IAAI,CAAC,iCAAiC,EAAED,QAAQ,CAAC,CACjDE,IAAI,CAAEX,QAAQ,IAAK;MAChB,MAAMkB,YAAY,GAAGlB,QAAQ,CAACa,IAAI,CAACX,IAAI;MACvCI,OAAO,CAACS,GAAG,CAAC,iBAAiB,EAAEG,YAAY,CAAC;MAC5CpB,cAAc,CAACoB,YAAY,CAAC;;MAE5B;MACAd,YAAY,CAAC,CAAC;IAClB,CAAC,CAAC,CACDY,KAAK,CAAEX,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC5B;EAAA,CACH;EAED,oBACI9B,OAAA,CAACL,KAAK;IAACoC,SAAS,EAAE5B,OAAO,CAAC6B,IAAK;IAACC,SAAS,EAAE,CAAE;IAAAC,QAAA,gBACzClC,OAAA,CAACH,UAAU;MAACsC,OAAO,EAAC,IAAI;MAACJ,SAAS,EAAE5B,OAAO,CAACiC,cAAe;MAAAF,QAAA,EAAC;IAE5D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,EAEZhC,WAAW,gBACRR,OAAA;MAAAkC,QAAA,gBACIlC,OAAA,CAACH,UAAU;QAACsC,OAAO,EAAC,OAAO;QAACM,SAAS;QAAAP,QAAA,GAAC,WACzB,EAAC1B,WAAW,CAACkC,IAAI,EAAC,IAAE,EAAClC,WAAW,CAACmC,QAAQ,EAAC,IACvD;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEbxC,OAAA;QAAI+B,SAAS,EAAE5B,OAAO,CAACyC,WAAY;QAAAV,QAAA,EAC9B9B,QAAQ,CAACyC,GAAG,CAAEpB,OAAO,iBAClBzB,OAAA;UAAqB+B,SAAS,EAAE5B,OAAO,CAAC2C,WAAY;UAAAZ,QAAA,gBAChDlC,OAAA;YAAAkC,QAAA,GAAST,OAAO,CAACsB,QAAQ,EAAC,IAAE;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACpCf,OAAO,CAACuB,IAAI;QAAA,GAFRvB,OAAO,CAACwB,EAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGf,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAELxC,OAAA;QAAK+B,SAAS,EAAE5B,OAAO,CAAC+C,cAAe;QAAAhB,QAAA,gBACnClC,OAAA,CAACJ,SAAS;UACNmC,SAAS,EAAE5B,OAAO,CAACgD,KAAM;UACzBC,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,sBAAsB;UAClCC,KAAK,EAAEhD,UAAW;UAClBiD,QAAQ,EAAGC,CAAC,IAAKjD,aAAa,CAACiD,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC,eACFxC,OAAA,CAACN,MAAM;UAACyC,OAAO,EAAC,WAAW;UAACuB,KAAK,EAAC,SAAS;UAACC,OAAO,EAAE7B,iBAAkB;UAAAI,QAAA,EAAC;QAExE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAENxC,OAAA,CAACP,gBAAgB;MACbmE,UAAU,EAAGxC,QAAQ,IAAKD,cAAc,CAAC;QACrC4B,QAAQ,EAAE3B,QAAQ,CAACsB,IAAI;QACvBmB,KAAK,EAAEzC,QAAQ,CAACuB,QAAQ;QACxBmB,QAAQ,EAAE1C,QAAQ,CAAC0C;MACvB,CAAC,CAAE;MACHC,OAAO,EAAG3C,QAAQ,IAAKQ,WAAW,CAAC;QAC/BmB,QAAQ,EAAE3B,QAAQ,CAACsB,IAAI;QACvBoB,QAAQ,EAAE1C,QAAQ,CAAC0C;MACvB,CAAC;IAAE;MAAAzB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEhB,CAAC;AAACtC,EAAA,CApHID,QAAkB;AAAA+D,EAAA,GAAlB/D,QAAkB;AAsHxB,eAAeA,QAAQ;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
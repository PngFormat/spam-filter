{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\\\OneDrive\\\\Desktop\\\\spam-filter\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport Filter from 'bad-words';\nimport rusBadWords from '../rusbadwords.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser,\n  username\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const filter = new Filter();\n  const rusFilter = new Set(rusBadWords);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/messages');\n        const storedMessages = response.data;\n        setMessages(storedMessages);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [messages]);\n  useEffect(() => {\n    return () => {\n      localStorage.setItem('chatMessages', JSON.stringify(messages));\n    };\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      const censoredMessage = censorMessage(newMessage);\n\n      // Count profane words in the message\n      const profaneWordCount = countProfaneWords(newMessage);\n\n      // Check if profane word count exceeds threshold\n      if (profaneWordCount > 2) {\n        addToBlacklist(currentUser.username, 'Excessive profanity');\n        return;\n      }\n      axios.post('http://localhost:3001/api/messages', {\n        text: censoredMessage,\n        userId: currentUser.id,\n        username\n      }).then(response => {\n        const newMessageObj = response.data;\n        setMessages(prevMessages => [...prevMessages, newMessageObj]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const countProfaneWords = message => {\n    const words = message.split(/\\s+/);\n    let profaneCount = 0;\n    words.forEach(word => {\n      if (filter.isProfane(word) || rusFilter.has(word.toLowerCase())) {\n        profaneCount++;\n      }\n    });\n    return profaneCount;\n  };\n  const handleDeleteMessage = async messageId => {\n    console.log(\"Deleting message with ID:\", messageId);\n    const authToken = localStorage.getItem('authToken');\n    try {\n      await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      alert('Failed to delete message. Please try again later.');\n    }\n  };\n  const censorMessage = message => {\n    return message.split(/\\s+/).map(word => {\n      if (filter.isProfane(word)) {\n        return '*'.repeat(word.length);\n      } else if (rusFilter.has(word.toLowerCase())) {\n        return '*'.repeat(word.length);\n      } else {\n        return word;\n      }\n    }).join(' ');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      children: [\"Welcome, \", currentUser.username, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classes.messageItem,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this), message.text, message.username === username && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: () => handleDeleteMessage(message.text),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"FmToBdnLeZixAusu3LUthW1MWLk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","styles","axios","Filter","rusBadWords","jsxDEV","_jsxDEV","Chat","currentUser","username","_s","classes","messages","setMessages","newMessage","setNewMessage","filter","rusFilter","Set","fetchMessages","response","get","storedMessages","data","error","console","localStorage","setItem","JSON","stringify","handleSendMessage","trim","warn","censoredMessage","censorMessage","profaneWordCount","countProfaneWords","addToBlacklist","post","text","userId","id","then","newMessageObj","prevMessages","catch","alert","message","words","split","profaneCount","forEach","word","isProfane","has","toLowerCase","handleDeleteMessage","messageId","log","authToken","getItem","delete","headers","Authorization","_id","map","repeat","length","join","children","variant","paragraph","fileName","_jsxFileName","lineNumber","columnNumber","className","messageList","messageItem","color","onClick","inputContainer","input","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/Пользователь/OneDrive/Desktop/spam-filter/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Filter from 'bad-words';\r\nimport rusBadWords from '../rusbadwords.json';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    username: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n    username: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser, username }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const filter = new Filter();\r\n    const rusFilter = new Set(rusBadWords);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:3001/api/messages');\r\n                const storedMessages = response.data;\r\n                setMessages(storedMessages);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        };\r\n    }, [messages]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            const censoredMessage = censorMessage(newMessage);\r\n\r\n            // Count profane words in the message\r\n            const profaneWordCount = countProfaneWords(newMessage);\r\n\r\n            // Check if profane word count exceeds threshold\r\n            if (profaneWordCount > 2) {\r\n                addToBlacklist(currentUser.username, 'Excessive profanity');\r\n                return;\r\n            }\r\n\r\n            axios.post('http://localhost:3001/api/messages', { text: censoredMessage, userId: currentUser.id, username })\r\n                .then(response => {\r\n                    const newMessageObj: Message = response.data;\r\n                    setMessages(prevMessages => [...prevMessages, newMessageObj]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    const countProfaneWords = (message: string): number => {\r\n        const words = message.split(/\\s+/);\r\n        let profaneCount = 0;\r\n        words.forEach(word => {\r\n            if (filter.isProfane(word) || rusFilter.has(word.toLowerCase())) {\r\n                profaneCount++;\r\n            }\r\n        });\r\n        return profaneCount;\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId: string) => {\r\n        console.log(\"Deleting message with ID:\", messageId);\r\n        const authToken = localStorage.getItem('authToken');\r\n\r\n        try {\r\n            await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`\r\n                }\r\n            });\r\n\r\n            setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\r\n        } catch (error) {\r\n            console.error('Error deleting message:', error);\r\n            alert('Failed to delete message. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const censorMessage = (message: string) => {\r\n        return message\r\n            .split(/\\s+/)\r\n            .map(word => {\r\n                if (filter.isProfane(word)) {\r\n                    return '*'.repeat(word.length);\r\n                } else if (rusFilter.has(word.toLowerCase())) {\r\n                    return '*'.repeat(word.length);\r\n                } else {\r\n                    return word;\r\n                }\r\n            })\r\n            .join(' ');\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Welcome, {currentUser.username} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li key={message._id} className={classes.messageItem}>\r\n                        <strong>{message.username}: </strong>\r\n                        {message.text}\r\n                        {message.username === username && (\r\n                            <Button variant=\"outlined\" color=\"error\" onClick={() => handleDeleteMessage(message.text)}>\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport Filter from 'bad-words'; // Импортируем фильтр\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser,\n  username\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [rusProfanityFilter, setRusProfanityFilter] = useState(null); // Стейт для фильтра\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/messages');\n        const storedMessages = response.data;\n        setMessages(storedMessages);\n        setRusProfanityFilter(new Filter({\n          list: storedMessages.rusBadWords\n        })); // Создаем фильтр после получения сообщений\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    return () => {\n      localStorage.setItem('chatMessages', JSON.stringify(messages));\n    };\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    console.log('UserId' + currentUser.id);\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        userId: currentUser.id,\n        username\n      }).then(response => {\n        const newMessageObj = response.data;\n        setMessages(prevMessages => [...prevMessages, newMessageObj]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const handleDeleteMessage = async messageId => {\n    console.log(\"Deleting message with ID:\", messageId);\n    const authToken = localStorage.getItem('authToken');\n    try {\n      await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      alert('Failed to delete message. Please try again later.');\n    }\n  };\n\n  // Функция для цензурирования сообщения\n  const censorMessage = message => {\n    if (!rusProfanityFilter) return message; // Если фильтр еще не создан, возвращаем исходное сообщение\n    return rusProfanityFilter.clean(message); // Иначе цензурируем сообщение\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      children: [\"Welcome, \", currentUser.username, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classes.messageItem,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), censorMessage(message.text), \" \", message.username === username && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: () => handleDeleteMessage(message.text),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"U9dcyCYrLnSW//t02Asro4rzcKE=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","styles","axios","Filter","jsxDEV","_jsxDEV","Chat","currentUser","username","_s","classes","messages","setMessages","newMessage","setNewMessage","rusProfanityFilter","setRusProfanityFilter","fetchMessages","response","get","storedMessages","data","list","rusBadWords","error","console","localStorage","setItem","JSON","stringify","handleSendMessage","trim","warn","log","id","post","text","userId","then","newMessageObj","prevMessages","catch","alert","handleDeleteMessage","messageId","authToken","getItem","delete","headers","Authorization","filter","message","_id","censorMessage","clean","children","variant","paragraph","fileName","_jsxFileName","lineNumber","columnNumber","className","messageList","map","messageItem","color","onClick","inputContainer","input","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\nimport Filter from 'bad-words'; // Импортируем фильтр\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    username: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n    username: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser, username }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [rusProfanityFilter, setRusProfanityFilter] = useState<Filter | null>(null); // Стейт для фильтра\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:3001/api/messages');\r\n                const storedMessages = response.data;\r\n                setMessages(storedMessages);\r\n                setRusProfanityFilter(new Filter({ list: storedMessages.rusBadWords })); // Создаем фильтр после получения сообщений\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        };\r\n    }, [messages]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n        console.log('UserId' + currentUser.id)\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, userId: currentUser.id, username })\r\n\r\n                .then(response => {\r\n                    const newMessageObj: Message = response.data;\r\n                    setMessages(prevMessages => [...prevMessages, newMessageObj]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId: string) => {\r\n        console.log(\"Deleting message with ID:\", messageId);\r\n        const authToken = localStorage.getItem('authToken');\r\n\r\n        try {\r\n            await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`\r\n                }\r\n            });\r\n\r\n            setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\r\n        } catch (error) {\r\n            console.error('Error deleting message:', error);\r\n            alert('Failed to delete message. Please try again later.');\r\n        }\r\n    };\r\n\r\n    // Функция для цензурирования сообщения\r\n    const censorMessage = (message: string) => {\r\n        if (!rusProfanityFilter) return message; // Если фильтр еще не создан, возвращаем исходное сообщение\r\n        return rusProfanityFilter.clean(message); // Иначе цензурируем сообщение\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Welcome, {currentUser.username} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li key={message._id} className={classes.messageItem}>\r\n                        <strong>{message.username}: </strong>\r\n                        {censorMessage(message.text)} {/* Применяем цензуру к сообщению */}\r\n                        {message.username === username && (\r\n                            <Button variant=\"outlined\" color=\"error\" onClick={() => handleDeleteMessage(message.text)}>\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
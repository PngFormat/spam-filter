{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [messages, setMessages] = useState([2]);\n  const [newMessage, setNewMessage] = useState('');\n  const socket = io('http://localhost:3000');\n  socket.on('newMessage', newMessage => {\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n  });\n  useEffect(() => {\n    // Отримання початкових повідомлень при підключенні\n    socket.on('initialMessages', initialMessages => {\n      setMessages(initialMessages);\n    });\n\n    // Оновлення списку повідомлень при отриманні нового повідомлення\n    socket.on('newMessage', newMessage => {\n      setMessages([...messages, newMessage]);\n    });\n    return () => {\n      // Відключення при знищенні компонента\n      socket.disconnect();\n    };\n  }, [messages, socket]);\n  const handleSendMessage = () => {\n    axios.post('/api/messages', {\n      text: newMessage\n    }).then(response => {\n      setMessages(prevMessages => [...prevMessages, response.data]);\n      setNewMessage('');\n    }).catch(error => console.error('Error sending message:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: message.text\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"+Bffht05h947A6jYJ63+4nXFB2k=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","axios","io","jsxDEV","_jsxDEV","ChatRoom","_s","messages","setMessages","newMessage","setNewMessage","socket","on","prevMessages","initialMessages","disconnect","handleSendMessage","post","text","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","id","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\n\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n}\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([2]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const socket = io('http://localhost:3000');\r\n\r\n    socket.on('newMessage', (newMessage) => {\r\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    });\r\n    useEffect(() => {\r\n        // Отримання початкових повідомлень при підключенні\r\n        socket.on('initialMessages', (initialMessages) => {\r\n            setMessages(initialMessages);\r\n        });\r\n\r\n        // Оновлення списку повідомлень при отриманні нового повідомлення\r\n        socket.on('newMessage', (newMessage) => {\r\n            setMessages([...messages, newMessage]);\r\n        });\r\n\r\n        return () => {\r\n            // Відключення при знищенні компонента\r\n            socket.disconnect();\r\n        };\r\n    }, [messages, socket]);\r\n\r\n    const handleSendMessage = () => {\r\n        axios.post('/api/messages', { text: newMessage })\r\n            .then(response => {\r\n                setMessages((prevMessages) => [...prevMessages, response.data]);\r\n                setNewMessage('');\r\n            })\r\n            .catch(error => console.error('Error sending message:', error));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Chat Room</h2>\r\n            <ul>\r\n                {messages.map(message => (\r\n                    <li key={message.id}>{message.text}</li>\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                />\r\n                <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport RegistrationForm from './RegistrationForm';\nimport { Paper, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport LoginForm from './AuthForm';\nimport ChatInterface from './ChatInterface'; // Import the component for displaying the chat interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const socket = io('http://localhost:3001', {\n    transports: ['websocket'],\n    reconnection: true,\n    reconnectionAttempts: 3\n  });\n  useEffect(() => {\n    loginUser();\n  }, []);\n  const loginUser = async () => {\n    try {\n      const users = await fetch('/api/users').then(response => response.json());\n      console.log('List of users:', users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const handleRegister = useCallback(userData => {\n    axios.post('http://localhost:3001/api/register', userData).then(response => {\n      const newUser = response.data.message;\n      console.log('New user:', newUser);\n      setCurrentUser(newUser);\n    }).catch(error => {\n      console.error('Error creating user:', error);\n    });\n  }, [setCurrentUser]);\n  const handleLogin = useCallback(userData => {\n    axios.post('http://localhost:3001/api/login', userData).then(response => {\n      const loggedInUser = response.data.user;\n      console.log('Logged in user:', loggedInUser);\n      setCurrentUser(loggedInUser);\n    }).catch(error => {\n      console.error('Error logging in:', error);\n    });\n  }, [setCurrentUser]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      className: classes.welcomeMessage,\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), currentUser ? /*#__PURE__*/_jsxDEV(ChatInterface, {\n      currentUser: currentUser,\n      messages: messages,\n      newMessage: newMessage,\n      setNewMessage: setNewMessage,\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(RegistrationForm, {\n        onRegister: userData => handleRegister({\n          username: userData.name,\n          email: userData.nickname,\n          password: userData.password\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n        onLogin: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"oen9eJEEoUwDpqRGwkKKNMJD3VU=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","io","RegistrationForm","Paper","Typography","styles","LoginForm","ChatInterface","jsxDEV","_jsxDEV","ChatRoom","_s","classes","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","socket","transports","reconnection","reconnectionAttempts","loginUser","users","fetch","then","response","json","console","log","error","handleRegister","userData","post","newUser","data","message","catch","handleLogin","loggedInUser","user","handleSendMessage","trim","warn","text","username","nickname","prevMessages","alert","className","root","elevation","children","variant","welcomeMessage","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","name","email","password","onLogin","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport RegistrationForm from './RegistrationForm';\r\nimport { Button, Paper, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport LoginForm from './AuthForm';\r\nimport ChatInterface from './ChatInterface'; // Import the component for displaying the chat interface\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const classes = styles;\r\n\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n    const socket = io('http://localhost:3001', {\r\n        transports: ['websocket'],\r\n        reconnection: true,\r\n        reconnectionAttempts: 3,\r\n    });\r\n\r\n    useEffect(() => {\r\n        loginUser();\r\n    }, []);\r\n\r\n    const loginUser = async () => {\r\n        try {\r\n            const users = await fetch('/api/users').then((response) => response.json());\r\n            console.log('List of users:', users);\r\n        } catch (error) {\r\n            console.error('Error fetching users:', error);\r\n        }\r\n    };\r\n\r\n    const handleRegister = useCallback(\r\n        (userData: { username: string; email: string; password: string }) => {\r\n            axios\r\n                .post('http://localhost:3001/api/register', userData)\r\n                .then((response) => {\r\n                    const newUser = response.data.message;\r\n                    console.log('New user:', newUser);\r\n                    setCurrentUser(newUser);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error creating user:', error);\r\n                });\r\n        },\r\n        [setCurrentUser]\r\n    );\r\n\r\n    const handleLogin = useCallback(\r\n        (userData: { username: string; password: string }) => {\r\n            axios\r\n                .post('http://localhost:3001/api/login', userData)\r\n                .then((response) => {\r\n                    const loggedInUser = response.data.user;\r\n                    console.log('Logged in user:', loggedInUser);\r\n                    setCurrentUser(loggedInUser);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error logging in:', error);\r\n                });\r\n        },\r\n        [setCurrentUser]\r\n    );\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios\r\n                .post('http://localhost:3001/api/messages', {\r\n                    text: newMessage,\r\n                    username: currentUser.nickname,\r\n                })\r\n                .then((response) => {\r\n                    setMessages((prevMessages) => [...prevMessages, response.data]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root} elevation={3}>\r\n            <Typography variant=\"h5\" className={classes.welcomeMessage}>\r\n                Chat Room\r\n            </Typography>\r\n\r\n            {currentUser ? (\r\n                <ChatInterface\r\n                    currentUser={currentUser}\r\n                    messages={messages}\r\n                    newMessage={newMessage}\r\n                    setNewMessage={setNewMessage}\r\n                    handleSendMessage={handleSendMessage}\r\n                />\r\n            ) : (\r\n                <div>\r\n                    <RegistrationForm\r\n                        onRegister={(userData) =>\r\n                            handleRegister({\r\n                                username: userData.name,\r\n                                email: userData.nickname,\r\n                                password: userData.password,\r\n                            })\r\n                        }\r\n                    />\r\n                    <LoginForm onLogin={handleLogin} />\r\n                </div>\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
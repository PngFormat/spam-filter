{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\\\Desktop\\\\spam-filter\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport RegistrationForm from \"./RegistrationForm\";\nimport { Button, Paper, TextField, Typography } from \"@mui/material\";\nimport styles from '../styles/Home.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [name, setName] = useState('');\n  useEffect(() => {\n    loginUser();\n  }, []);\n  useEffect(() => {\n    const socket = io('http://localhost:3001', {\n      transports: ['websocket'],\n      reconnection: true,\n      reconnectionAttempts: 3\n    });\n    axios.get('/api/messages').then(response => setMessages(response.data)).catch(error => console.error('Error fetching initial messages:', error));\n    socket.on('newMessage', newMessage => {\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const loginUser = async () => {\n    try {\n      const users = await fetch('/api/register').then(response => response.json());\n      console.log('List of users:', users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const handleRegister = useCallback(userData => {\n    axios.post('/api/register', userData).then(response => {\n      const newUser = response.data.message;\n      console.log('New user:', newUser);\n      setCurrentUser(newUser);\n      const {\n        name\n      } = newUser || {};\n      setName(name);\n      console.log(`Welcome, ${name}!`);\n    }).catch(error => {\n      console.error('Error creating user:', error);\n    });\n  }, [setCurrentUser, setName]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    elevation: 3,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      className: classes.welcomeMessage,\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), !currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        onRegister: userData => handleRegister(userData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        paragraph: true,\n        children: [\"Welcome, \", currentUser.nickname, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: classes.messageList,\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classes.messageItem,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this), message.text]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inputContainer,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.input,\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"4SOdVZ6fYzI6RaTVo4zfY5y9JA0=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","io","RegistrationForm","Button","Paper","TextField","Typography","styles","jsxDEV","_jsxDEV","ChatRoom","_s","classes","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","name","setName","loginUser","socket","transports","reconnection","reconnectionAttempts","get","then","response","data","catch","error","console","on","prevMessages","disconnect","users","fetch","json","log","handleRegister","userData","post","newUser","message","handleSendMessage","trim","warn","text","username","nickname","alert","className","root","elevation","children","variant","welcomeMessage","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","paragraph","messageList","map","messageItem","id","inputContainer","input","type","placeholder","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Пользователь/Desktop/spam-filter/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport RegistrationForm from \"./RegistrationForm\";\r\nimport {Button,Paper, TextField, Theme, Typography} from \"@mui/material\";\r\nimport styles from '../styles/Home.module.css'\r\n\r\n\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const classes = styles;\r\n\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n    const [name, setName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        loginUser();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const socket = io('http://localhost:3001', {\r\n            transports: ['websocket'],\r\n            reconnection: true,\r\n            reconnectionAttempts: 3,\r\n        });\r\n\r\n        axios.get('/api/messages')\r\n            .then(response => setMessages(response.data))\r\n            .catch(error => console.error('Error fetching initial messages:', error));\r\n\r\n        socket.on('newMessage', (newMessage) => {\r\n            setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    const loginUser = async () => {\r\n        try {\r\n            const users = await fetch('/api/register').then((response) => response.json());\r\n            console.log('List of users:', users);\r\n        } catch (error) {\r\n            console.error('Error fetching users:', error);\r\n        }\r\n    };\r\n\r\n    const handleRegister = useCallback((userData: { name: string; nickname: string; password: string }) => {\r\n        axios\r\n            .post('/api/register', userData)\r\n            .then((response) => {\r\n                const newUser = response.data.message;\r\n                console.log('New user:', newUser);\r\n                setCurrentUser(newUser);\r\n                const { name } = newUser || {};\r\n                setName(name);\r\n                console.log(`Welcome, ${name}!`);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error creating user:', error);\r\n            });\r\n    }, [setCurrentUser, setName]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios.post('/api/messages', { text: newMessage, username: currentUser.nickname })\r\n                .then(response => {\r\n                    setMessages((prevMessages) => [...prevMessages, response.data]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root} elevation={3}>\r\n            <Typography variant=\"h5\" className={classes.welcomeMessage}>\r\n                Chat Room\r\n            </Typography>\r\n\r\n            {!currentUser && (\r\n                <div>\r\n                    <RegistrationForm\r\n                        onRegister={(userData) => handleRegister(userData)}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {currentUser && (\r\n                <div>\r\n                    <Typography variant=\"body1\" paragraph>\r\n                        Welcome, {currentUser.nickname}!\r\n                    </Typography>\r\n\r\n                    <ul className={classes.messageList}>\r\n                        {messages.map((message) => (\r\n                            <li key={message.id} className={classes.messageItem}>\r\n                                <strong>{message.username}: </strong>\r\n                                {message.text}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div className={classes.inputContainer}>\r\n                        <TextField\r\n                            className={classes.input}\r\n                            type=\"text\"\r\n                            placeholder=\"Type your message...\"\r\n                            value={newMessage}\r\n                            onChange={(e) => setNewMessage(e.target.value)}\r\n                        />\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                            Send\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\pages\\\\InfoPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfoPage = () => {\n  _s();\n  const [userData, setUserData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/user/message-count');\n        const data = response.data;\n        const userIds = Object.keys(data);\n        const promises = userIds.map(userId => axios.get(`http://localhost:3001/api/user/${userId}`));\n        const usersData = await Promise.all(promises);\n        const userDataArray = usersData.map((user, index) => ({\n          username: user.data.username,\n          messageCount: data[userIds[index]]\n        }));\n        setUserData(userDataArray);\n        setLoading(false);\n        console.log(userDataArray);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Message Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: userData.length > 0 ? userData.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 33\n        }, this), \" \", user.username, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Message Count:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 33\n        }, this), \" \", user.messageCount]\n      }, user.username, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 29\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No user data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(InfoPage, \"hwv9Rll+1Nzzw3Sx6L8pt/dYrJ4=\");\n_c = InfoPage;\nexport default InfoPage;\nvar _c;\n$RefreshReg$(_c, \"InfoPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","InfoPage","_s","userData","setUserData","loading","setLoading","fetchUserData","response","get","data","userIds","Object","keys","promises","map","userId","usersData","Promise","all","userDataArray","user","index","username","messageCount","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/pages/InfoPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { IUser } from \"../Interfaces/interfaces\";\r\n\r\nconst InfoPage: React.FC = () => {\r\n    const [userData, setUserData] = useState<{ username: string, messageCount: number }[]>([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchUserData = async () => {\r\n            try {\r\n                const response = await axios.get<{ [key: string]: number }>('http://localhost:3001/api/user/message-count');\r\n                const data = response.data;\r\n                const userIds = Object.keys(data);\r\n                const promises = userIds.map(userId => axios.get(`http://localhost:3001/api/user/${userId}`));\r\n                const usersData = await Promise.all(promises);\r\n                const userDataArray = usersData.map((user, index) => ({\r\n                    username: user.data.username,\r\n                    messageCount: data[userIds[index]],\r\n                }));\r\n                setUserData(userDataArray);\r\n                setLoading(false);\r\n                console.log(userDataArray);\r\n            } catch (error) {\r\n                console.error('Error fetching user data:', error);\r\n            }\r\n        };\r\n\r\n        fetchUserData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>User Message Info</h1>\r\n            {loading ? (\r\n                <p>Loading...</p>\r\n            ) : (\r\n                <ul>\r\n                    {userData.length > 0 ? (\r\n                        userData.map(user => (\r\n                            <li key={user.username}>\r\n                                <strong>Username:</strong> {user.username}<br />\r\n                                <strong>Message Count:</strong> {user.messageCount}\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li>No user data available</li>\r\n                    )}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfoPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
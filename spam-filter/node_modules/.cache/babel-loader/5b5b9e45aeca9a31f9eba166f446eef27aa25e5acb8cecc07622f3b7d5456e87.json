{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport RegistrationForm from \"./RegistrationForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const socket = io('http://localhost:3001', {\n    transports: ['websocket'],\n    reconnection: true,\n    reconnectionAttempts: 3\n  });\n  useEffect(() => {\n    loginUser();\n  }, []);\n\n  // useEffect(() => {\n  //     axios.get('http://localhost:3001/api/messages')\n  //         .then(response => setMessages(response.data))\n  //         .catch(error => console.error('Error fetching initial messages:', error));\n  //\n  //     socket.on('newMessage', (newMessage) => {\n  //         setMessages((prevMessages) => [...prevMessages, newMessage]);\n  //     });\n  //\n  //     return () => {\n  //         socket.disconnect();\n  //     };\n  // }, [socket]);\n\n  const loginUser = async () => {\n    try {\n      const users = await fetch('/api/users').then(response => response.json());\n      console.log('List of users:', users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n  const handleRegister = useCallback(userData => {\n    axios.post('http://localhost:3001/api/users', userData).then(response => {\n      const newUser = response.data;\n      setCurrentUser(newUser);\n    }).catch(error => {\n      console.error('Error creating user:', error);\n    });\n  }, [setCurrentUser]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const sendMessage = message => {\n    socket.emit('sendMessage', {\n      text: message\n    });\n  };\n  socket.on('newMessage', message => {\n    console.log('New message:', message);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), !currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        onRegister: userData => handleRegister({\n          username: userData.name,\n          email: userData.nickname,\n          password: userData.password\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", currentUser.name, \" (\", currentUser.nickname, \")!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this), message.text]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"JL7VpRJ5dIo71BAo6wI7s2BmpO8=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","io","RegistrationForm","jsxDEV","_jsxDEV","ChatRoom","_s","messages","setMessages","newMessage","setNewMessage","currentUser","setCurrentUser","socket","transports","reconnection","reconnectionAttempts","loginUser","users","fetch","then","response","json","console","log","error","handleRegister","userData","post","newUser","data","catch","handleSendMessage","trim","warn","text","username","nickname","prevMessages","alert","sendMessage","message","emit","on","children","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","name","email","password","map","id","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/ChatRoom.tsx"],"sourcesContent":["import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport RegistrationForm from \"./RegistrationForm\";\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\n\r\nconst ChatRoom: React.FC = () => {\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [currentUser, setCurrentUser] = useState<User | null>(null);\r\n    const socket = io('http://localhost:3001', {\r\n        transports: ['websocket'],\r\n        reconnection: true,\r\n        reconnectionAttempts: 3,\r\n    });\r\n\r\n    useEffect(() => {\r\n        loginUser();\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     axios.get('http://localhost:3001/api/messages')\r\n    //         .then(response => setMessages(response.data))\r\n    //         .catch(error => console.error('Error fetching initial messages:', error));\r\n    //\r\n    //     socket.on('newMessage', (newMessage) => {\r\n    //         setMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    //     });\r\n    //\r\n    //     return () => {\r\n    //         socket.disconnect();\r\n    //     };\r\n    // }, [socket]);\r\n\r\n    const loginUser = async () => {\r\n        try {\r\n            const users = await fetch('/api/users').then((response) => response.json());\r\n            console.log('List of users:', users);\r\n        } catch (error) {\r\n            console.error('Error fetching users:', error);\r\n        }\r\n    };\r\n\r\n    const handleRegister = useCallback((userData: { username: string; email: string; password: string }) => {\r\n        axios\r\n            .post('http://localhost:3001/api/users', userData)\r\n            .then((response) => {\r\n                const newUser = response.data;\r\n                setCurrentUser(newUser);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error creating user:', error);\r\n            });\r\n    }, [setCurrentUser]);\r\n\r\n\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, username: currentUser.nickname })\r\n                .then(response => {\r\n                    setMessages((prevMessages) => [...prevMessages, response.data]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const sendMessage = (message: any) => {\r\n        socket.emit('sendMessage', { text: message });\r\n    };\r\n\r\n\r\n    socket.on('newMessage', (message) => {\r\n        console.log('New message:', message);\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Chat Room</h2>\r\n\r\n            {!currentUser && (\r\n                <div>\r\n                    <RegistrationForm\r\n                        onRegister={(userData) => handleRegister({\r\n                            username: userData.name,\r\n                            email: userData.nickname,\r\n                            password: userData.password\r\n                        })}\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n            {currentUser && (\r\n                <div>\r\n                    <p>Welcome, {currentUser.name} ({currentUser.nickname})!</p>\r\n\r\n                    <ul>\r\n                        {messages.map(message => (\r\n                            <li key={message.id}>\r\n                                <strong>{message.username}: </strong>\r\n                                {message.text}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Type your message...\"\r\n                            value={newMessage}\r\n                            onChange={(e) => setNewMessage(e.target.value)}\r\n                        />\r\n                        <button onClick={handleSendMessage}>Send</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography, Snackbar, Alert } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport Filter from 'bad-words';\nimport rusBadWords from '../rusbadwords.json';\nimport Stickers from './Stickers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser,\n  username\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [selectedSticker, setSelectedSticker] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [rateLimitMessage, setRateLimitMessage] = useState('');\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const filter = new Filter();\n  const rusFilter = new Set(rusBadWords);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/messages');\n        setMessages(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    return () => {\n      localStorage.setItem('chatMessages', JSON.stringify(messages));\n    };\n  }, [messages]);\n  const handleStickerSelect = sticker => {\n    setSelectedSticker(sticker);\n  };\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() && !selectedSticker) {\n      console.warn('Message text is empty and no sticker is selected');\n      return;\n    }\n    let messageToSend = newMessage.trim();\n    if (selectedSticker) {\n      messageToSend += ` ${selectedSticker}`;\n    }\n    if (currentUser) {\n      const profaneWordCount = countProfaneWords(messageToSend);\n      if (profaneWordCount > 2) {\n        addToBlacklist(currentUser.username, 'Excessive profanity');\n        alert('Excessive profanity detected. Your message cannot be sent.');\n        return;\n      }\n      const censoredMessage = censorMessage(messageToSend);\n      try {\n        const response = await axios.post('http://localhost:3001/api/messages', {\n          text: censoredMessage,\n          userId: currentUser.id,\n          username\n        });\n        setMessages(prevMessages => [...prevMessages, response.data]);\n        setNewMessage('');\n        setSelectedSticker(null);\n      } catch (error) {\n        // @ts-ignore\n        if (error.response && error.response.status === 429) {\n          // @ts-ignore\n          setRateLimitMessage(error.response.data.message);\n          setOpenSnackbar(true);\n        } else {\n          console.error('Error sending message:', error);\n        }\n      }\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const handleCloseSnackbar = () => {\n    setOpenSnackbar(false);\n  };\n  const countProfaneWords = message => {\n    const words = message.split(/\\s+/);\n    let profaneCount = 0;\n    words.forEach(word => {\n      if (filter.isProfane(word) || rusFilter.has(word.toLowerCase())) {\n        profaneCount++;\n      }\n    });\n    return profaneCount;\n  };\n  const censorMessage = message => {\n    return message.split(/\\s+/).map(word => filter.isProfane(word) || rusFilter.has(word.toLowerCase()) ? '*'.repeat(word.length) : word).join(' ');\n  };\n  const handleDeleteMessage = async messageId => {\n    const authToken = localStorage.getItem('authToken');\n    try {\n      await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      alert('Failed to delete message. Please try again later.');\n    }\n  };\n  const addToBlacklist = async (username, reason) => {\n    try {\n      const authToken = localStorage.getItem('authToken');\n      await axios.post('http://localhost:3001/api/blacklist', {\n        username,\n        reason\n      }, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n    } catch (error) {\n      console.error('Error adding user to blacklist:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatContainer,\n    style: {\n      backgroundColor: '#f3f3f3',\n      color: '#333'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      className: classes.welcomeMessage,\n      children: [\"Welcome, \", currentUser.username, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `${classes.messageItem} ${message.username === username ? classes.ownMessage : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.messageContent,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [message.username, \": \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this), message.text.trim().startsWith('/static/media/') ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: message.text,\n              alt: \"Sticker\",\n              className: classes.stickerImage,\n              width: \"30\",\n              height: \"30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.text.split(' ').slice(1).join(' ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true) : message.text.split(' ').map((part, index) => part.startsWith('/static/media/') ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: part,\n            alt: \"Sticker\",\n            className: classes.stickerImage,\n            width: \"30\",\n            height: \"30\"\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: part.split(':').map((subPart, subIndex) => subIndex % 2 === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n              children: subPart\n            }, subIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 53\n            }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `smiley-${subPart}.png`,\n              alt: `Smiley ${subPart}`\n            }, subIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 53\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 41\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this), message.username === username && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: () => handleDeleteMessage(message._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 29\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        style: {\n          backgroundColor: '#fff',\n          color: '#333'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Stickers, {\n        onStickerSelect: handleStickerSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        className: classes.sendButton,\n        style: {\n          backgroundColor: '#2196F3'\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: openSnackbar,\n      autoHideDuration: 6000,\n      onClose: handleCloseSnackbar,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnackbar,\n        severity: \"warning\",\n        sx: {\n          width: '100%'\n        },\n        children: rateLimitMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"gla6zJSpuc5vDAfZoPzDTtjj8yM=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","Snackbar","Alert","styles","axios","Filter","rusBadWords","Stickers","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","currentUser","username","_s","classes","messages","setMessages","selectedSticker","setSelectedSticker","newMessage","setNewMessage","rateLimitMessage","setRateLimitMessage","openSnackbar","setOpenSnackbar","filter","rusFilter","Set","fetchMessages","response","get","data","error","console","localStorage","setItem","JSON","stringify","handleStickerSelect","sticker","handleSendMessage","trim","warn","messageToSend","profaneWordCount","countProfaneWords","addToBlacklist","alert","censoredMessage","censorMessage","post","text","userId","id","prevMessages","status","message","handleCloseSnackbar","words","split","profaneCount","forEach","word","isProfane","has","toLowerCase","map","repeat","length","join","handleDeleteMessage","messageId","authToken","getItem","delete","headers","Authorization","_id","reason","className","chatContainer","style","backgroundColor","color","children","variant","paragraph","welcomeMessage","fileName","_jsxFileName","lineNumber","columnNumber","messageList","messageItem","ownMessage","messageContent","startsWith","src","alt","stickerImage","width","height","slice","part","index","subPart","subIndex","onClick","inputContainer","input","type","placeholder","value","onChange","e","target","onStickerSelect","sendButton","open","autoHideDuration","onClose","severity","sx","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography, Snackbar, Alert } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\nimport Filter from 'bad-words';\r\nimport rusBadWords from '../rusbadwords.json';\r\nimport Stickers from './Stickers';\r\n\r\ninterface Message {\r\n    _id: string;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    username: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n    username: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser, username }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [selectedSticker, setSelectedSticker] = useState<string | null>(null);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n    const [rateLimitMessage, setRateLimitMessage] = useState<string>('');\r\n    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n\r\n    const filter = new Filter();\r\n    const rusFilter = new Set(rusBadWords);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:3001/api/messages');\r\n                setMessages(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        };\r\n    }, [messages]);\r\n\r\n    const handleStickerSelect = (sticker: string) => {\r\n        setSelectedSticker(sticker);\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (!newMessage.trim() && !selectedSticker) {\r\n            console.warn('Message text is empty and no sticker is selected');\r\n            return;\r\n        }\r\n\r\n        let messageToSend = newMessage.trim();\r\n\r\n        if (selectedSticker) {\r\n            messageToSend += ` ${selectedSticker}`;\r\n        }\r\n\r\n        if (currentUser) {\r\n            const profaneWordCount = countProfaneWords(messageToSend);\r\n\r\n            if (profaneWordCount > 2) {\r\n                addToBlacklist(currentUser.username, 'Excessive profanity');\r\n                alert('Excessive profanity detected. Your message cannot be sent.');\r\n                return;\r\n            }\r\n\r\n            const censoredMessage = censorMessage(messageToSend);\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:3001/api/messages', {\r\n                    text: censoredMessage,\r\n                    userId: currentUser.id,\r\n                    username,\r\n                });\r\n\r\n                setMessages(prevMessages => [...prevMessages, response.data]);\r\n                setNewMessage('');\r\n                setSelectedSticker(null);\r\n            } catch (error) {\r\n                // @ts-ignore\r\n                if (error.response && error.response.status === 429) {\r\n                    // @ts-ignore\r\n                    setRateLimitMessage(error.response.data.message);\r\n                    setOpenSnackbar(true);\r\n                } else {\r\n                    console.error('Error sending message:', error);\r\n                }\r\n            }\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    const handleCloseSnackbar = () => {\r\n        setOpenSnackbar(false);\r\n    };\r\n\r\n    const countProfaneWords = (message: string): number => {\r\n        const words = message.split(/\\s+/);\r\n        let profaneCount = 0;\r\n\r\n        words.forEach(word => {\r\n            if (filter.isProfane(word) || rusFilter.has(word.toLowerCase())) {\r\n                profaneCount++;\r\n            }\r\n        });\r\n\r\n        return profaneCount;\r\n    };\r\n\r\n    const censorMessage = (message: string) => {\r\n        return message\r\n            .split(/\\s+/)\r\n            .map(word => (filter.isProfane(word) || rusFilter.has(word.toLowerCase()) ? '*'.repeat(word.length) : word))\r\n            .join(' ');\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId: string) => {\r\n        const authToken = localStorage.getItem('authToken');\r\n\r\n        try {\r\n            await axios.delete(`http://localhost:3001/api/messages/${messageId}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`,\r\n                },\r\n            });\r\n\r\n            setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\r\n        } catch (error) {\r\n            console.error('Error deleting message:', error);\r\n            alert('Failed to delete message. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const addToBlacklist = async (username: string, reason: string) => {\r\n        try {\r\n            const authToken = localStorage.getItem('authToken');\r\n            await axios.post('http://localhost:3001/api/blacklist', { username, reason }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`,\r\n                },\r\n            });\r\n        } catch (error) {\r\n            console.error('Error adding user to blacklist:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.chatContainer} style={{ backgroundColor: '#f3f3f3', color: '#333' }}>\r\n            <Typography variant=\"body1\" paragraph className={classes.welcomeMessage}>\r\n                Welcome, {currentUser.username} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li\r\n                        key={message._id}\r\n                        className={`${classes.messageItem} ${message.username === username ? classes.ownMessage : ''}`}\r\n                    >\r\n                        <div className={classes.messageContent}>\r\n                            <strong>{message.username}: </strong>\r\n                            {message.text.trim().startsWith('/static/media/') ? (\r\n                                <>\r\n                                    <img\r\n                                        src={message.text}\r\n                                        alt=\"Sticker\"\r\n                                        className={classes.stickerImage}\r\n                                        width=\"30\"\r\n                                        height=\"30\"\r\n                                    />\r\n                                    <p>{message.text.split(' ').slice(1).join(' ')}</p>\r\n                                </>\r\n                            ) : (\r\n                                message.text.split(' ').map((part, index) => (\r\n                                    part.startsWith('/static/media/') ? (\r\n                                        <img\r\n                                            key={index}\r\n                                            src={part}\r\n                                            alt=\"Sticker\"\r\n                                            className={classes.stickerImage}\r\n                                            width=\"30\"\r\n                                            height=\"30\"\r\n                                        />\r\n                                    ) : (\r\n                                        <React.Fragment key={index}>\r\n                                            {part.split(':').map((subPart, subIndex) => (\r\n                                                subIndex % 2 === 0 ? (\r\n                                                    <span key={subIndex}>{subPart}</span>\r\n                                                ) : (\r\n                                                    <img\r\n                                                        key={subIndex}\r\n                                                        src={`smiley-${subPart}.png`}\r\n                                                        alt={`Smiley ${subPart}`}\r\n                                                    />\r\n                                                )\r\n                                            ))}\r\n                                        </React.Fragment>\r\n                                    )\r\n                                ))\r\n                            )}\r\n                        </div>\r\n                        {message.username === username && (\r\n                            <Button variant=\"outlined\" color=\"error\" onClick={() => handleDeleteMessage(message._id)}>\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                    style={{ backgroundColor: '#fff', color: '#333' }}\r\n                />\r\n                <Stickers onStickerSelect={handleStickerSelect} />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage} className={classes.sendButton} style={{ backgroundColor: '#2196F3' }}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n\r\n            <Snackbar open={openSnackbar} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert onClose={handleCloseSnackbar} severity=\"warning\" sx={{ width: '100%' }}>\r\n                    {rateLimitMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
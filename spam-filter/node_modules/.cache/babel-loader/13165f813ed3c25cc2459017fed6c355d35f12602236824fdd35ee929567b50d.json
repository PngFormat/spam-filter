{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser,\n  username\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/messages');\n        const storedMessages = response.data;\n        storedMessages.forEach(message => {\n          console.log('id:', message._id);\n        });\n        setMessages(storedMessages);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    return () => {\n      localStorage.setItem('chatMessages', JSON.stringify(messages));\n    };\n  }, [messages]);\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    console.log('UserId' + currentUser.id);\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        userId: currentUser.id,\n        username\n      }).then(response => {\n        const newMessageObj = response.data;\n        setMessages(prevMessages => [...prevMessages, newMessageObj]);\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  const handleDeleteMessage = messageId => {\n    console.log(\"Deleting message with ID:\", messageId);\n    axios.delete(`http://localhost:3001/api/messages/${messageId.toString()}`).then(response => {\n      setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\n    }).catch(error => {\n      console.error('Error deleting message:', error);\n      alert('Failed to delete message. Please try again later.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      children: [\"Welcome, \", username, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classes.messageItem,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), message.text, message.username === username && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"error\",\n          onClick: () => handleDeleteMessage(message._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"FmToBdnLeZixAusu3LUthW1MWLk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","styles","axios","jsxDEV","_jsxDEV","Chat","currentUser","username","_s","classes","messages","setMessages","newMessage","setNewMessage","fetchMessages","response","get","storedMessages","data","forEach","message","console","log","_id","error","localStorage","setItem","JSON","stringify","handleSendMessage","trim","warn","id","post","text","userId","then","newMessageObj","prevMessages","catch","alert","handleDeleteMessage","messageId","delete","toString","filter","children","variant","paragraph","fileName","_jsxFileName","lineNumber","columnNumber","className","messageList","map","messageItem","color","onClick","inputContainer","input","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface Message {\r\n    _id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n    username: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser, username }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('')\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:3001/api/messages');\r\n                const storedMessages = response.data;\r\n                storedMessages.forEach((message: { _id: string; }) => {\r\n                    console.log('id:', message._id);\r\n                });\r\n                setMessages(storedMessages);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('chatMessages', JSON.stringify(messages));\r\n        };\r\n    }, [messages]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n        console.log('UserId' + currentUser.id)\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, userId: currentUser.id, username })\r\n\r\n                .then(response => {\r\n                    const newMessageObj: Message = response.data;\r\n                    setMessages(prevMessages => [...prevMessages, newMessageObj]);\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n\r\n    const handleDeleteMessage = (messageId: number) => {\r\n        console.log(\"Deleting message with ID:\", messageId);\r\n        axios.delete(`http://localhost:3001/api/messages/${messageId.toString()}`)\r\n            \r\n            .then(response => {\r\n                setMessages(prevMessages => prevMessages.filter(message => message._id !== messageId));\r\n            })\r\n            .catch(error => {\r\n                console.error('Error deleting message:', error);\r\n                alert('Failed to delete message. Please try again later.');\r\n            });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Welcome, {username} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li key={message._id} className={classes.messageItem}>\r\n                        <strong>{message.username}: </strong>\r\n                        {message.text}\r\n                        {message.username === username && (\r\n                            <Button variant=\"outlined\" color=\"error\" onClick={() => handleDeleteMessage(message._id)}>\r\n                                Delete\r\n                            </Button>\r\n                        )}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
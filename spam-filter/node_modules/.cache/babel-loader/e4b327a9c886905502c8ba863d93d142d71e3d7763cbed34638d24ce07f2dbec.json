{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\components\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button, TextField, Typography } from '@mui/material';\nimport styles from '../styles/Home.module.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  currentUser,\n  username\n}) => {\n  _s();\n  const classes = styles;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const storedMessages = localStorage.getItem('chatMessages');\n        if (storedMessages) {\n          setMessages(JSON.parse(storedMessages));\n        }\n      } catch (error) {\n        console.error('Error fetching stored messages:', error);\n      }\n    };\n    fetchMessages();\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('chatMessages', JSON.stringify(messages));\n  }, [messages]);\n  const saveMessagesToLocalStorage = updatedMessages => {\n    try {\n      localStorage.setItem('chatMessages', JSON.stringify(updatedMessages));\n    } catch (error) {\n      console.error('Error saving messages to local storage:', error);\n    }\n  };\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) {\n      console.warn('Message text is empty');\n      return;\n    }\n    if (currentUser) {\n      axios.post('http://localhost:3001/api/messages', {\n        text: newMessage,\n        username: currentUser.nickname\n      }).then(response => {\n        const newMessageObj = response.data;\n        const updatedMessages = [...messages, newMessageObj];\n        setMessages(updatedMessages);\n        localStorage.setItem('chatMessages', JSON.stringify(updatedMessages)); // Сохраняем в локальное хранилище\n        setNewMessage('');\n      }).catch(error => {\n        console.error('Error sending message:', error);\n        alert('Failed to send message. Please try again later.');\n      });\n    } else {\n      alert('You need to log in first.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      paragraph: true,\n      children: [\"Welcome, \", username, \" (\", currentUser.id, \")!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.messageList,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classes.messageItem,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), message.text]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: classes.input,\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"FmToBdnLeZixAusu3LUthW1MWLk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","Button","TextField","Typography","styles","axios","jsxDEV","_jsxDEV","Chat","currentUser","username","_s","classes","messages","setMessages","newMessage","setNewMessage","fetchMessages","storedMessages","localStorage","getItem","JSON","parse","error","console","setItem","stringify","saveMessagesToLocalStorage","updatedMessages","handleSendMessage","trim","warn","post","text","nickname","then","response","newMessageObj","data","catch","alert","children","variant","paragraph","id","fileName","_jsxFileName","lineNumber","columnNumber","className","messageList","map","message","messageItem","inputContainer","input","type","placeholder","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/components/Chat.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport styles from '../styles/Home.module.css';\r\nimport axios from 'axios';\r\n\r\ninterface Message {\r\n    id: number;\r\n    text: string;\r\n    username: string;\r\n}\r\n\r\ninterface User {\r\n    id: number;\r\n    name: string;\r\n    nickname: string;\r\n}\r\n\r\ninterface ChatProps {\r\n    currentUser: User;\r\n    username: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ currentUser, username }) => {\r\n    const classes = styles;\r\n    const [messages, setMessages] = useState<Message[]>([]);\r\n    const [newMessage, setNewMessage] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const storedMessages = localStorage.getItem('chatMessages');\r\n                if (storedMessages) {\r\n                    setMessages(JSON.parse(storedMessages));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching stored messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('chatMessages', JSON.stringify(messages));\r\n    }, [messages]);\r\n\r\n\r\n    const saveMessagesToLocalStorage = (updatedMessages: Message[]) => {\r\n        try {\r\n            localStorage.setItem('chatMessages', JSON.stringify(updatedMessages));\r\n        } catch (error) {\r\n            console.error('Error saving messages to local storage:', error);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = () => {\r\n        if (!newMessage.trim()) {\r\n            console.warn('Message text is empty');\r\n            return;\r\n        }\r\n\r\n        if (currentUser) {\r\n            axios.post('http://localhost:3001/api/messages', { text: newMessage, username: currentUser.nickname })\r\n                .then(response => {\r\n                    const newMessageObj: Message = response.data;\r\n                    const updatedMessages = [...messages, newMessageObj];\r\n                    setMessages(updatedMessages);\r\n                    localStorage.setItem('chatMessages', JSON.stringify(updatedMessages)); // Сохраняем в локальное хранилище\r\n                    setNewMessage('');\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error sending message:', error);\r\n                    alert('Failed to send message. Please try again later.');\r\n                });\r\n        } else {\r\n            alert('You need to log in first.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"body1\" paragraph>\r\n                Welcome, {username} ({currentUser.id})!\r\n            </Typography>\r\n\r\n            <ul className={classes.messageList}>\r\n                {messages.map(message => (\r\n                    <li key={message.id} className={classes.messageItem}>\r\n                        <strong>{username}: </strong>\r\n                        {message.text}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <div className={classes.inputContainer}>\r\n                <TextField\r\n                    className={classes.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={newMessage}\r\n                    onChange={e => setNewMessage(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSendMessage}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SiDR\\\\WebstormProjects\\\\spam-app\\\\spam-filter\\\\src\\\\pages\\\\InfoPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfoPage = () => {\n  _s();\n  const [userData, setUserData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('/api/messages');\n        const messages = response.data;\n        const messageCountMap = {};\n\n        // Подсчитываем количество сообщений для каждого пользователя\n        messages.forEach(message => {\n          const {\n            username\n          } = message;\n          if (messageCountMap[username]) {\n            messageCountMap[username]++;\n          } else {\n            messageCountMap[username] = 1;\n          }\n        });\n        setUserData(messageCountMap);\n      } catch (error) {\n        console.error('Error fetching message data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Message Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(userData).map(([username, messageCount]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this), \" \", username, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Message Count:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), \" \", messageCount]\n      }, username, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(InfoPage, \"LXAOzhxTy9nW1apql5Pcq7dSgFA=\");\n_c = InfoPage;\nexport default InfoPage;\nvar _c;\n$RefreshReg$(_c, \"InfoPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","InfoPage","_s","userData","setUserData","fetchData","response","get","messages","data","messageCountMap","forEach","message","username","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","messageCount","_c","$RefreshReg$"],"sources":["C:/Users/SiDR/WebstormProjects/spam-app/spam-filter/src/pages/InfoPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst InfoPage: React.FC = () => {\r\n    const [userData, setUserData] = useState<{ [key: string]: number }>({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get('/api/messages');\r\n                const messages = response.data;\r\n                const messageCountMap: { [key: string]: number } = {};\r\n\r\n                // Подсчитываем количество сообщений для каждого пользователя\r\n                messages.forEach((message: any) => {\r\n                    const { username } = message;\r\n                    if (messageCountMap[username]) {\r\n                        messageCountMap[username]++;\r\n                    } else {\r\n                        messageCountMap[username] = 1;\r\n                    }\r\n                });\r\n\r\n                setUserData(messageCountMap);\r\n            } catch (error) {\r\n                console.error('Error fetching message data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>User Message Info</h1>\r\n            <ul>\r\n                {Object.entries(userData).map(([username, messageCount]) => (\r\n                    <li key={username}>\r\n                        <strong>Username:</strong> {username}<br />\r\n                        <strong>Message Count:</strong> {messageCount}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfoPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAA4B,CAAC,CAAC,CAAC;EAEvEC,SAAS,CAAC,MAAM;IACZ,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,eAAe,CAAC;QACjD,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI;QAC9B,MAAMC,eAA0C,GAAG,CAAC,CAAC;;QAErD;QACAF,QAAQ,CAACG,OAAO,CAAEC,OAAY,IAAK;UAC/B,MAAM;YAAEC;UAAS,CAAC,GAAGD,OAAO;UAC5B,IAAIF,eAAe,CAACG,QAAQ,CAAC,EAAE;YAC3BH,eAAe,CAACG,QAAQ,CAAC,EAAE;UAC/B,CAAC,MAAM;YACHH,eAAe,CAACG,QAAQ,CAAC,GAAG,CAAC;UACjC;QACJ,CAAC,CAAC;QAEFT,WAAW,CAACM,eAAe,CAAC;MAChC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ,CAAC;IAEDT,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BpB,OAAA;MAAAgB,QAAA,EACKK,MAAM,CAACC,OAAO,CAACnB,QAAQ,CAAC,CAACoB,GAAG,CAAC,CAAC,CAACV,QAAQ,EAAEW,YAAY,CAAC,kBACnDxB,OAAA;QAAAgB,QAAA,gBACIhB,OAAA;UAAAgB,QAAA,EAAQ;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACP,QAAQ,eAACb,OAAA;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC3CpB,OAAA;UAAAgB,QAAA,EAAQ;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACI,YAAY;MAAA,GAFxCX,QAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAClB,EAAA,CA1CID,QAAkB;AAAAwB,EAAA,GAAlBxB,QAAkB;AA4CxB,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}